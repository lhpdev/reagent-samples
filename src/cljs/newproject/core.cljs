(ns newproject.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.session :as session]
   [newproject.stateless-samples :as stateless-samples :refer [stateless-samples-page]]
   [newproject.statefull-samples :as statefull-samples :refer [statefull-samples-page]]
   [newproject.about :as about :refer [about-page]]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]))

;; ------------------------
;; Routes

(def router
  (reitit/router
    [["/" :index]
    ["/stateless-samples" :stateless-samples]
    ["/statefull-samples" :statefull-samples]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;(path-for :about)
;; ------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
      [:h1 {:style {:font-size "1.5rem"}} "Reagent: Minimalistic React for ClojureScript"]
      [:p "That is a project for study porpuses"]
      [:ul
        [:li [:a {:href (path-for :stateless-samples)} "Stateless Samples"]]
        [:li [:a {:href (path-for :statefull-samples)} "Statefull Samples"]]
        [:li [:a {:href "/broken/link"} "Broken link"]]
        [:li [:a {:href "/about"} "About"]]]]))

;; ------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :stateless-samples #'stateless-samples-page
    :statefull-samples #'statefull-samples-page
    :about #'about-page))

;; -------------------------
;; Page mounting components

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
        [:header
          [:p
            [:a {:href (path-for :index)} "Home"] " | "
            [:a {:href (path-for :stateless-samples)} "Stateless Samples"] " | "
            [:a {:href (path-for :statefull-samples)} "Statefull Samples"] " | "
            [:a {:href (path-for :about)} "About"]]]
          [page]
          [:footer
            [:p "this web site was generated by "
              [:a {:href "https://github.com/lhpdev"} "@lhpdev"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (reagent/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
